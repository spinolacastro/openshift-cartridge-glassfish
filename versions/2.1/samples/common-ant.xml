<?xml version="1.0" encoding="iso-8859-1"?>
<!--
 The contents of this file are subject to the terms
 of the Common Development and Distribution License
 (the License).  You may not use this file except in
 compliance with the License.

 You can obtain a copy of the license at
 https://glassfish.dev.java.net/public/CDDLv1.0.html or
 glassfish/bootstrap/legal/CDDLv1.0.txt.
 See the License for the specific language governing
 permissions and limitations under the License.

 When distributing Covered Code, include this CDDL
 Header Notice in each file and include the License file
 at glassfish/bootstrap/legal/CDDLv1.0.txt.
 If applicable, add the following below the CDDL Header,
 with the fields enclosed by brackets [] replaced by
 you own identifying information:
 "Portions Copyrighted [year] [name of copyright owner]"

 Copyright 2006 Sun Microsystems, Inc. All rights reserved.
-->

  <!-- ======================================================== -->
  <!--  Application Server Common Properties            -->
  <!-- ======================================================== -->
  <!-- properties to be read from properties file - set default to -->
  <property file="${sample.home}/common.properties"/>
  <property file="${sample.home}/database.properties"/>
  <property environment="as.env"/>
  
  <property name="webDD.dir" value="web/WEB-INF"/>
  <property name="jspf.dir"  value="web/WEB-INF/jspf"/>
  <property name="tags.dir"  value="web/WEB-INF/tags"/>
  <property name="tlds.dir"  value="web/WEB-INF/tlds"/> 
  
  <property name="earDD"        value="application.xml,sun-application.xml"/>  
  <property name="warDD"        value="${webDD.dir}/web.xml,${webDD.dir}/sun-web.xml"/>
  <property name="jarDD"        value="ejb-jar.xml,sun-ejb-jar.xml"/>
  <property name="clientDD"     value="application-client.xml,sun-application-client.xml"/>
  <property name="src.conf"     value="src/conf"/>
  <property name="jarDD.dir"    value="${src.conf}"/>
  <property name="clientDD.dir" value="${src.conf}"/>
  <property name="setup.dir"     value="setup"/>
   
  <!-- change this property to use a compiler other than javac. -->
  <property name="build.compiler" value="modern"/>
  
  <!-- Source file location. -->
  <property name="src"    value="src/java"/>
  <property name="src.docroot"    value="web"/>
  
  <!-- Destination directory for the build and assembly targets -->
  <property name="build"                value="./build"/>
  <property name="javadocs.dir"         value="./javadocs/"/>
  <property name="build.classesdir"     value="${build}/classes"/>
  <property name="assemble"             value="${build}/assemble"/>
  <property name="assemble.jar"         value="${assemble}/jar"/>
  <property name="assemble.ejbjar"      value="${assemble}/jar"/>
  <property name="assemble.sharejar"    value="${assemble}/share"/>
  <property name="hyphen"               value="-"/>
  <property name="ejb-suffix-str"       value="ejb"/>
  <property name="ra-suffix-str"     	value="ra"/>
  <property name="share-suffix-str"     value="share"/>
  <property name="web-suffix-str"       value="war"/>
  <property name="appclient-suffix-str" value="client"/>
  <property name="standalone-client-suffix-str" value="standalone${hyphen}client"/>
  <property name="ejbjar-dir-suffix"    value="${hyphen}${ejb-suffix-str}"/>
  <property name="ra-dir-suffix"  	value="${hyphen}${ra-suffix-str}"/>
  <property name="sharejar-dir-suffix"  value="${hyphen}${share-suffix-str}"/>
  <property name="webwar-dir-suffix"    value="${hyphen}${web-suffix-str}"/>
  <property name="appclient-dir-suffix" value="${hyphen}${appclient-suffix-str}"/>
  <property name="standalone-client-dir-suffix" value="${hyphen}${standalone-client-suffix-str}"/>  
  <property name="assemble.war"         value="${assemble}/war"/>
  <property name="assemble.ear"         value="${assemble}/ear"/>
  <property name="assemble.clientjar"   value="${assemble}/client"/>
  <property name="ejbdir.build.classesdir"   value="../${sample.name}${ejbjar-dir-suffix}/${build.classesdir}"/>
  <property name="ejbdir.assemble.jardir"    value="../${sample.name}${ejbjar-dir-suffix}/${assemble}"/>
  <property name="sharedir.build.classesdir" value="../${sample.name}${sharejar-dir-suffix}/${build.classesdir}"/>

  <!-- Target file Names.                                      -->
  <property name="ear"         value="${binary.name}.ear"/>
  <property name="war"         value="${binary.name}.war"/>
  <property name="jar"         value="${binary.name}.jar"/>
  <property name="ejbjar"      value="${binary.name}Ejb.jar"/>
  <property name="clientjar"   value="${binary.name}Client.jar"/> 
  <property name="sharejar"    value="${binary.name}Share.jar"/>
 
  <!-- application type                                        -->
  <property name="apptype"     value="application"/>

  <!-- classpath jar files location. -->
  <property name="sample.classpath.dir" value="${com.sun.aas.installRoot}/lib"/>
  <property name="optional.taskdef.jar" value="sun-appserv-ant.jar"/>

   <!-- database properties -->
   <target name="check_db">
         <condition property="usingPointbase" value="true">
 	 <equals arg1="${default.database}" arg2="pointbase" casesensitive="false" trim="true"/>
	 </condition>          

         <condition property="usingOracleDD" value="true">
         <equals arg1="${default.database}" arg2="oracleDD" casesensitive="false" trim="true"/>
         </condition>

         <condition property="usingOracle" value="true">
         <equals arg1="${default.database}" arg2="oracle" casesensitive="false" trim="true"/>
         </condition>

         <condition property="usingOracleInet" value="true">
         <equals arg1="${default.database}" arg2="oracleInet" casesensitive="false" trim="true"/>
         </condition>
         
         <condition property="usingDerby" value="true">
         <equals arg1="${default.database}" arg2="derby" casesensitive="false" trim="true"/>
         </condition>
         
         <condition property="usingDerbyEmbedded" value="true">
         <equals arg1="${default.database}" arg2="derbyEmbedded" casesensitive="false" trim="true"/>
         </condition>

  </target>
    
  <target name="select_derby_user_password_common" if="usingDerby">
    <property name="db.user"  value="derbypublic"/>
    <property name="db.pwd"   value="derbypublic"/>
  </target>

  <target name="select_pointbase_user_password_common" if="usingPointbase">
    <property name="db.user"  value="pbpublic"/>
    <property name="db.pwd"   value="pbpublic"/>
  </target>
          
  <target name="select_db_username_password_common" depends="select_pointbase_user_password_common,select_derby_user_password_common"/>
  
  <target name="select_derby_sql_file_common" if="usingDerby">
    <property name="db.file"  value="${setup.dir}/sql/${derby.sql.location}/${derby.sql.location}"/>
  </target>
  
  <target name="select_pointbase_sql_file_common" if="usingPointbase">
    <property name="db.file"  value="${setup.dir}/sql/${pointbase.sql.location}/${pointbase.sql.location}" />          
  </target>
  
  <target name="select_derbyEmbedded_sql_file_common" if="usingDerbyEmbedded">
    <property name="db.file"  value="${setup.dir}/sql/${derby.sql.location}/${derby.sql.location}"/>    
  </target>
 
  <!--
  <target name="select_derby_sql_file_common" if="usingDerby">
    <antcall target="configure_for_derby" />  <!- - setup_derby should not have "if" - ->           
  </target>

  <target name="select_pointbase_sql_file_common" if="usingPointbase">
    <antcall target="configure_for_pointbase" />  <!- - setup_pointbase should not have "if" - ->           
  </target>
   -->
          
   
  <target name="select_db_file_username_password_common" depends="select_db_file_common,select_db_username_password_common"/>  
  <target name="select_db_file_common" depends="check_db,select_pointbase_sql_file_common,select_derby_sql_file_common,select_derbyEmbedded_sql_file_common"/>
  <!--<target name="select_db_file_common" depends="check_db,configure_for_pointbase,configure_for_derby,configure_for_derbyEmbedded,select_db_username_password_common">
    <property name="addDatabaseClasses2Classpath" value="true"/>
  </target>-->
   
    
  <!-- equivalent to target select_pointbase_sql_file_common -->
  <target name="configure_for_pointbase" if="usingPointbase">
     <!--AEM PROPERTIES COMMON TO ALL APPS-->
     <antcall target="setup_pointbase" />  <!-- setup_pointbase should not have "if" -->
     
     <!--AEM PROPERTIES that depend on the application -->
    <property name="db.file"  value="${setup.dir}/sql/${pointbase.sql.location}/${pointbase.sql.location}" />
  </target>
  
  <target name="configure_for_derby" if="usingDerby">
     <!--AEM PROPERTIES COMMON TO ALL APPS-->
     <antcall target="setup_derby" />  <!-- setup_derby should not have "if" -->
     
     <!--AEM PROPERTIES that depend on the application -->
    <property name="db.file"  value="${setup.dir}/sql/${derby.sql.location}/${derby.sql.location}" />         
  </target>
  
  <target name="configure_for_derbyEmbedded" if="usingDerbyEmbedded">
     <!--AEM PROPERTIES COMMON TO ALL APPS-->
     <antcall target="setup_derbyEmbedded" />  <!-- setup_derbyEmbedded should not have "if" -->
     
     <!--AEM PROPERTIES that depend on the application -->
    <property name="db.file"  value="${setup.dir}/sql/${derby.sql.location}/${derby.sql.location}" />         
  </target>
  
  <target name="addDbClasses2Classpath">
         <condition property="addDatabaseClasses2Classpath" value="true">
 	 <equals arg1="${default.database}" arg2="pointbase" casesensitive="false" trim="true"/>
	 </condition>          

         <condition property="addDatabaseClasses2Classpath" value="true">
         <equals arg1="${default.database}" arg2="oracleDD" casesensitive="false" trim="true"/>
         </condition>

         <condition property="addDatabaseClasses2Classpath" value="true">
         <equals arg1="${default.database}" arg2="oracle" casesensitive="false" trim="true"/>
         </condition>

         <condition property="addDatabaseClasses2Classpath" value="true">
         <equals arg1="${default.database}" arg2="oracleInet" casesensitive="false" trim="true"/>
         </condition>
         
         <condition property="addDatabaseClasses2Classpath" value="true">
         <equals arg1="${default.database}" arg2="derby" casesensitive="false" trim="true"/>
         </condition>
         
          <condition property="addDatabaseClasses2Classpath" value="true">
         <equals arg1="${default.database}" arg2="derbyEmbedded" casesensitive="false" trim="true"/>
         </condition>

  </target>

  <target name="setup_pointbase" if="usingPointbase">
           <property name="db.host" value="${pointbase.server}"/>
	   <property name="db.port" value="${pointbase.port}"/>
	   <property name="db.driver" value="${pointbase.driver}"/>
	   <property name="db.sid"   value="{pointbase.dbName}"/>
	   <property name="db.root" value="${com.sun.aas.pointbaseRoot}"/>
	   <property name="db.url" value="${pointbase.url}"/>  
	   <property name="db.classpath" value="${pointbase.classes}"/>
	   <property name="db.delimiter" value=";"/>	
	   <property name="url.prop" value="DatabaseName" />
	   <property name="ds.class" value="${pointbase.dataSource}" />
	   <property name="xa.ds.class" value="com.pointbase.xa.xaDataSource" />
	   <property name="dbvendorname" value="${pointbase.dbvendorname}" />	
           <!-- ant doesn't allow you to read this in from .properties file correctly, must hard code it-->
           <!--<property name="db.properties" value="${pointbase.properties}" />-->
           <property name="db.properties" value="user=${pointbase.user}:password=${pointbase.passwd}:DatabaseName=jdbc\:pointbase\:server\:\/\/${pointbase.server}\:${pointbase.port}\/${pointbase.dbName},new" />
           <!--<property name="addDatabaseClasses2Classpath" value="true"/>-->           
  </target>

  <target name="setup_oracle" if="usingOracle">
           <property name="db.host" value="${oracle.server}"/>
           <property name="db.port" value="${oracle.port}"/>
           <property name="db.driver" value="${oracle.driver}"/>
           <property name="db.sid"   value="{oracle.dbName}"/>
           <property name="db.root" value=""/>
           <property name="db.url" value="${oracle.url}"/>
           <property name="db.classpath" value="${oracle.classes}"/>
           <property name="db.delimiter" value=";"/>
           <property name="url.prop" value="DatabaseName"/> 
           <property name="ds.class" value="${oracle.XAdataSource}" />
	   <property name="dbvendorname" value="${oracle.dbvendorname}" />
           <property name="db.properties" value="${oracle.properties}" />
  </target>
 
  <target name="setup_oracleDD" if="usingOracleDD">
           <property name="db.host" value="${oracleDD.server}"/>
           <property name="db.port" value="${oracleDD.port}"/>
           <property name="db.driver" value="${oracleDD.driver}"/>
           <property name="db.sid"   value="{oracleDD.dbName}"/>
           <property name="db.root" value=""/>
           <property name="db.url" value="${oracleDD.url}"/>
           <property name="db.classpath" value="${oracleDD.classes}"/>
           <property name="db.delimiter" value=";"/>
           <property name="url.prop" value="DatabaseName" />
           <property name="ds.class" value="${oracleDD.dataSource}" />
           <property name="dbvendorname" value="${oracleDD.dbvendorname}" />
           <property name="db.properties" value="${oracleDD.properties}" />
  </target>


  <target name="setup_oracleInet" if="usingOracleInet">
           <property name="db.host" value="${oracleInet.server}"/>
           <property name="db.port" value="${oracleInet.port}"/>
           <property name="db.driver" value="${oracleInet.driver}"/>
           <property name="db.sid"   value="{oracleInet.dbName}"/>
           <property name="db.root" value=""/>
           <property name="db.url" value="${oracleInet.url}"/>
           <property name="db.classpath" value="${oracleInet.classes}"/>
           <property name="db.delimiter" value=";"/>
           <property name="url.prop" value="DatabaseName" />
           <property name="ds.class" value="${oracleInet.dataSource}" />
           <property name="dbvendorname" value="${oracleInet.dbvendorname}" />
           <property name="db.properties" value="${oracleInet.properties}" />
  </target>
  
  <target name="setup_derby" if="usingDerby">
           <property name="db.host" value="${derby.server}"/>
           <property name="db.port" value="${derby.port}"/>
           <property name="db.driver" value="${derby.driver}"/>
           <property name="db.sid"   value="${derby.dbName}"/>
           <property name="db.root" value="${com.sun.aas.derbyRoot}"/>
           <property name="db.url" value="${derby.url}"/>
           <property name="db.classpath" value="${derby.classes}"/>
           <property name="db.delimiter" value=";"/>
           <property name="url.prop" value="DatabaseName" />
           <property name="ds.class" value="${derby.dataSource}" />
           <property name="dbvendorname" value="${derby.dbvendorname}" />
           <property name="db.properties" value="${derby.properties}" />
  </target>
  <!-- taken from Lance
  <target name="configureDerby" if="usingDerby">
           <property name="db.delimiter" 
                     value=";"/>
           <property name="db.url" 
                     value="jdbc:derby:net://${db.host}:${db.port}/${db.name};create=true;retrieveMessagesFromServerOnGetMessage=true"/>
           <property name="db.driver" 
                     value="com.ibm.db2.jcc.DB2Driver"/>
           <property name="db.datasource" 
                     value="com.ibm.db2.jcc.DB2DataSource"/>
           <property name="db.properties" 
                     value="user=${db.user}:password=${db.password}:DatabaseName=${db.name}:driverType=4:portNumber=${db.port}" />
    </target>
    -->

  <target name="setup_derbyEmbedded" if="usingDerbyEmbedded">
           <property name="db.host" value="${derbyEmbedded.server}"/>
           <property name="db.port" value="${derbyEmbedded.port}"/>
           <property name="db.driver" value="${derbyEmbedded.driver}"/>
           <property name="db.sid"   value="{derbyEmbedded.dbName}"/>
           <property name="db.root" value="${com.sun.aas.derbyRoot}"/>
           <property name="db.url" value="${derbyEmbedded.url}"/>
           <property name="db.classpath" value="${derbyEmbedded.classes}"/>
           <property name="db.delimiter" value=";"/>
           <property name="url.prop" value="DatabaseName" />
           <property name="ds.class" value="${derbyEmbedded.dataSource}" />
           <property name="dbvendorname" value="${derbyEmbedded.dbvendorname}" />
           <property name="db.properties" value="${derbyEmbedded.properties}" />
  </target>
  
  <target name="setup_db" depends="check_db, setup_pointbase,setup_oracle,setup_oracleDD,setup_oracleInet,setup_derby,setup_derbyEmbedded"/>

  <target name="setLDLIBPATH" depends="checkPlatform" >
      <!-- For unix and linux platforms                 -->
      <!-- Add /opt/sun/private/lib for JES installs    -->
       <antcall target="setUnixLDLIBPATH" />

      <!-- For Windows platforms      -->
      <antcall target="setWindowsLDLIBPATH" />
  </target>

  <target name="setUnixLDLIBPATH" if="isUnixPlatform" >
      <echo message="Setting LD_LIBRARY_PATH to ${com.sun.aas.installRoot}/lib:/usr/lib/mps/secv1:/opt/sun/private/lib"/>
      <property name="LD_LIBRARY_PATH" value="${com.sun.aas.installRoot}/lib:/usr/lib/mps/secv1:/opt/sun/private/lib" />
  </target>

  <target name="setWindowsLDLIBPATH" if="isWindowsPlatform" >
      <!-- No LD_LIBRARY_PATH for Windows platforms      -->
      <property name="LD_LIBRARY_PATH" value="" />
  </target>

  <!-- ======================================================= -->
  <!--              Read/Set properties.                       -->
  <!-- ======================================================= -->

  <target name="init_common" depends="build_cpath">
    <!-- define these properties if samples dont define  -->
    <property name="classpath.prefix" value="."/>
    <property name="classpath.suffix" value="."/>
    <property name="build.classpath" 
      value="${classpath.prefix}:${ejbdir.build.classesdir}:${sharedir.build.classesdir}:${build.classesdir}:${appserver.cpath}:${classpath.suffix}"/>
    <property name="extraargs.1" value="" />
    <property name="extraargs.2" value="" />
    <property name="createTablesArgs" value="" />
    <property name="deleteTablesArgs" value="" />
    <property name="cluster.name" value="" />
    <property name="admin.password.file" value="${com.sun.aas.installRoot}/samples/password.txt" /> 
  </target>

  
  
  <!-- ======================================================= -->
  <!-- Classpath and environment        -->
  <!-- ======================================================= -->
  
  <target name="build_cpath" unless="appserver.cpath">
    <path id="sample_classpath_jars">
      <fileset dir="${com.sun.aas.installRoot}/lib" includes="*.jar" />
      <fileset dir="${com.sun.aas.webServicesLib}" includes="*.jar"/>
      <fileset dir="${com.sun.aas.imqLib}" includes="*.jar"/>      
      <fileset dir="${com.sun.aas.javaRoot}/lib" includes="tools.jar"/>      
    </path>
    <pathconvert pathsep=":" property="appserver.cpath" refid="sample_classpath_jars"/>
  </target>

  <target name="setup_env" depends="init_common,sethost,setport,setuser,setpassword,setinstance,update_env"/>

  <target name="update_env" if="update.done">
    <propertyfile file="${sample.home}/common.properties">
      <entry key="admin.host" value="${admin.host}"/>
      <entry key="admin.port" value="${admin.port}"/>
      <entry key="admin.password" value="${admin.password}"/>
      <entry key="admin.user" value="${admin.user}"/>
      <entry key="appserver.instance" value="${appserver.instance}"/>
    </propertyfile>
  </target>

  <target name="sethost" depends="envhost, readhost"/>
  <target name="envhost" if="as.env.AS_ADMIN_HOST" >
    <property name="admin.host" value="${as.env.AS_ADMIN_HOST}"/>
  </target>
  <target name="readhost" unless="admin.host" >
    <echo>
     ======================================================================================
     You will be promted for application server installation parameters. These inputs will 
     be stored in ${com.sun.aas.installRoot}/samples/common.properties. Please edit this 
     file to make any corrections in future.
     ======================================================================================
     </echo>
    <sun-appserv-input message="Please Enter app-server Host Name : " addproperty="admin.host" />
    <property name="update.done" value="true"/>
  </target>

  <target name="setport" depends="envport, readport"/>
  <target name="envport" if="as.env.AS_ADMIN_PORT" >
    <property name="admin.port" value="${as.env.AS_ADMIN_PORT}"/>
  </target>
  <target name="readport"  unless="admin.port" >
    <sun-appserv-input message="Please Enter app-server Admin Port : " addproperty="admin.port" />
    <property name="update.done" value="true"/>
  </target>
 
  <target name="setuser" depends="envuser, readuser"/>
  <target name="envuser" if="as.env.AS_ADMIN_USER" >
    <property name="admin.user" value="${as.env.AS_ADMIN_USER}"/>
  </target>
  <target name="readuser" unless="admin.user">
    <sun-appserv-input message="Please Enter app-server Admin User Name : " addproperty="admin.user" />
    <property name="update.done" value="true"/>
  </target>

  <target name="setpassword" depends="init_common, envpassword, readpassword">
    <echo message="AS_ADMIN_PASSWORD=${admin.password}" file="${admin.password.file}" />
  </target>
  <target name="envpassword" if="as.env.AS_ADMIN_PASSWORD" >
    <property name="admin.password" value="${as.env.AS_ADMIN_PASSWORD}"/>
  </target>
  <target name="readpassword"  unless="admin.password" >
    <sun-appserv-input message="Please Enter app-server Admin User Password : " addproperty="admin.password" />
    <property name="update.done" value="true"/>
  </target>

  <target name="setinstance" depends="envinstance, readinstance"/>

  <target name="envinstance" if="as.env.AS_ADMIN_INSTANCE" >
    <property name="appserver.instance" value="${as.env.AS_ADMIN_INSTANCE}"/>
    <echo message="${appserver.instance}"/>
  </target>
  <target name="readinstance"  unless="appserver.instance" >
    <sun-appserv-input message="Please Enter app-server Instance Name : " addproperty="appserver.instance" />
    <property name="update.done" value="true"/>
    <echo>
     ======================================================================================
     Your inputs have been stored in ${com.sun.aas.installRoot}/samples/common.properties. 
     Please edit this file to make any corrections.
     ======================================================================================
    </echo>
  </target>
  
  <!--
      add.classpathsuffix adds the classpath settings as defined in
      build.properties.
                                                                                                                                                             
     The path is converted to correctly reflect the OS that ant is being
     executed on.
    -->                                                                                                                                                             
   <target name="add.classpathsuffix" depends="configPlatform, addDbClasses2Classpath" if="addDatabaseClasses2Classpath">
        <echo message="Setting ${appserver.instance}.java-config.classpathsuffix=${j2ee.home.ri.classpathsuffix}"/>
        <path id="foosuffix">
            <pathelement location="${j2ee.home.ri.classpathsuffix}" />
        </path>
        <pathconvert targetos="${os}" property="classpathsuffix"
                     refid="foosuffix"
                     dirsep="${dirsep}" >
        </pathconvert>
        <exec executable="${exec.asadmin}" >
            <arg line=" set"/>
            <arg line=" --user ${admin.user}"/>
            <arg line=" --passwordfile '${admin.password.file}'"/>
            <arg line=" --host ${admin.host}"/>
            <arg line=" --port ${admin.port}"/>
            <arg line=" ${appserver.instance}.java-config.classpath_suffix=${classpathsuffix}"/>
        </exec>
        <antcall target="restart.server"/>
   </target>
    
  <!-- ======================================================= -->
  <!-- Compile all classes.                                    -->
  <!-- ======================================================= -->
  <target name="compile_common" depends="init_common">
    <mkdir dir="${build.classesdir}"/>
    <echo message="Compiling source files into ${build.classesdir}" />
    <javac srcdir="${src}"
           destdir="${build.classesdir}"
           classpath="${build.classpath}"/>
  </target> 
   
   
  <!-- ======================================================= -->
  <!-- Compile all JSP's.                                    -->
  <!-- ======================================================= -->
  
<target name="compile_jsp_common" depends="create_war_common">
     <echo message="Compiling JSP(s)"/>
     <mkdir dir="${assemble.war}/WEB-INF/generated"/>
     <sun-appserv-jspc
         webapp="${assemble.war}"
         destdir="${assemble.war}/WEB-INF/generated"
         classpath="${assemble.war}/WEB-INF/classes:${com.sun.aas.installRoot}/lib/appserv-rt.jar:${com.sun.aas.installRoot}/lib/j2ee.jar:${com.sun.aas.installRoot}/lib/appserv-ext.jar"/>
     <javac
         srcdir="${assemble.war}/WEB-INF/generated"
         destdir="${assemble.war}/WEB-INF/generated"
         debug="on"
         classpath="${assemble.war}/WEB-INF/classes:${com.sun.aas.installRoot}/lib/appserv-rt.jar:${com.sun.aas.installRoot}/lib/j2ee.jar:${com.sun.aas.installRoot}/lib/appserv-ext.jar">
         <include name="**/*.java"/>
     </javac>
   </target>
   
   
   <!-- ======================================================= -->
   <!--  Check the available subdirectories for this application -->
   <!-- ======================================================= -->
   
   <target name="check_for_components">
      <available file="${sample.name}${ejbjar-dir-suffix}"    type="dir" property="ejb.component.present"/>
      <available file="${sample.name}${webwar-dir-suffix}"    type="dir" property="war.component.present"/>
      <available file="${sample.name}${sharejar-dir-suffix}"  type="dir" property="share.component.present"/>
      <available file="${sample.name}${sharejar-dir-suffix}/${src}"  type="dir" property="share.java.component.present"/>
      <available file="${sample.name}${appclient-dir-suffix}" type="dir" property="client.component.present"/>
      <available file="${sample.name}${standalone-client-dir-suffix}" type="dir" property="standalone.client.component.present"/>
  </target>  
  
  
  <!-- ======================================================= -->
  <!-- Clean up various files and directories.                 -->
  <!-- ======================================================= -->
  
  
  <target name="clean_clientjar_common">
    <delete dir="${assemble.clientjar}"/>    
  </target>
  
  <target name="clean_ear_common">
    <delete dir="${assemble.ear}"/>    
  </target>
 
  <target name="clean_war_common">
    <delete dir="${assemble.war}"/>    
  </target>
 
  <target name="clean_ejbjar_common">
    <delete dir="${assemble.ejbjar}"/>    
  </target>
  
  <target name="clean_jar_common">
    <delete dir="${assemble.jar}"/>    
  </target>

  <target name="clean_common" >
    <delete dir="${build}"/>
    <delete dir="${javadocs.dir}"/>
    <delete dir="${assemble}"/>
  </target>

  <target name="clean_ejb_component" if="ejb.component.present">
      <ant antfile="build.xml" inheritAll="true" dir="${sample.name}${ejbjar-dir-suffix}" target="clean"/>
  </target>
  
  <target name="clean_war_component" if="war.component.present">
      <ant antfile="build.xml" inheritAll="true" dir="${sample.name}${webwar-dir-suffix}" target="clean"/>
  </target>
  
  <target name="clean_share_component" if="share.component.present">
      <ant antfile="build.xml" inheritAll="true" dir="${sample.name}${sharejar-dir-suffix}" target="clean"/>
  </target>
  
  <target name="clean_client_component" if="client.component.present">
      <ant antfile="build.xml" inheritAll="true" dir="${sample.name}${appclient-dir-suffix}" target="clean"/>
  </target>
  
  <target name="clean_standalone_client_component" if="standalone.client.component.present">
      <ant antfile="build.xml" inheritAll="true" dir="${sample.name}${standalone-client-dir-suffix}" target="clean"/>
  </target>
  
  <target name="clean_components" depends="check_for_components,clean_client_component,clean_ejb_component,clean_war_component,clean_share_component,clean_standalone_client_component"/>

  <target name="clean_all_common" depends="clean_components,clean_clientjar_common,clean_ear_common,clean_war_common,clean_ejbjar_common,clean_jar_common,clean_common"/>
  
 
  <!-- ======================================================= -->
  <!-- Core components              -->
  <!-- ======================================================= -->
  
  <target name="core_ejb_component" if="ejb.component.present">
      <ant antfile="build.xml" inheritAll="true" dir="${sample.name}${ejbjar-dir-suffix}" target="core"/>
      <property name="ejbjar.done" value="true"/>
  </target>
  
  <target name="core_war_component" if="war.component.present">
      <ant antfile="build.xml" inheritAll="true" dir="${sample.name}${webwar-dir-suffix}" target="core"/>
      <property name="war.done" value="true"/>
  </target>
  
  <target name="core_share_component" if="share.java.component.present">
      <ant antfile="build.xml" inheritAll="true" dir="${sample.name}${sharejar-dir-suffix}" target="core"/>
      <property name="sharejar.done" value="true"/>
  </target>
  
  <target name="core_client_component" if="client.component.present">
      <ant antfile="build.xml" inheritAll="true" dir="${sample.name}${appclient-dir-suffix}" target="core"/>
      <property name="clientjar.done" value="true"/>
  </target>
  
  <target name="core_standalone_client_component" if="standalone.client.component.present">
      <ant antfile="build.xml" inheritAll="true" dir="${sample.name}${standalone-client-dir-suffix}" target="core"/>
      <property name="standalone.clientjar.done" value="true"/> 
  </target>
  
  <target name="core_all_common" depends="check_for_components,core_share_component,core_ejb_component,core_war_component,core_client_component,core_standalone_client_component"/>

  <!-- ======================================================= -->
  <!-- Create Javadocs component                               -->
  <!-- ======================================================= -->
  
  <target name="javadocs_common" depends="init_common">
    <!-- delete dir="${javadocs.dir}"/-->
    <mkdir dir="${javadocs.dir}"/>
    <javadoc packagenames="${javadoc.pkgnames}"
             destdir="${javadocs.dir}"
             classpath="${build.classpath}"
             author="true"
             version="true"
             use="true"
             windowtitle="Sun Java System Application Server ${sample.name} Sample Application API"
             doctitle="Sun Java System Application Server ${sample.name} Sample"
             bottom="Copyright &#169; 2004-2005 Sun Microsystems Inc. All Rights Reserved.">
	<sourcepath>
		<dirset dir=".">
		    <include name="${src}"/>
		    <include name="${sample.name}${sharejar-dir-suffix}/${src}"/>
		    <include name="${sample.name}${appclient-dir-suffix}/${src}"/>
		    <include name="${sample.name}${webwar-dir-suffix}/${src}"/>
		    <include name="${sample.name}${ejbjar-dir-suffix}/${src}"/>
		    <include name="${sample.name}${ra-dir-suffix}/${src}"/>
		</dirset>
	</sourcepath>
    </javadoc>
  </target>

  <target name="javadocs_noop_common">
    <echo message="This module does not contain any .java files to run javadocs."/>
  </target>
  
  <target name="javadocs_all_common" depends="javadocs_common"/>

    
  <!-- ======================================================= -->
  <!-- Top level targets                                 -->
  <!-- ======================================================= --> 

  <target name="copy_war_common" if="application.type.war">
      <delete file="./${war}"/>
      <copy file="${assemble.war}/${war}" todir="." />
  </target>
  
  <target name="copy_ear_common" if="application.type.ear">
      <delete file="./${ear}"/>
      <copy file="${assemble.ear}/${ear}" todir="." />
  </target>
    
  <target name="check_for_application_specific_jar">
    <available file="${specificjar.dir}/${specificjar.name}" type="file" property="application.specific.jars.present"/>  
  </target>
  
  <target name="copy_application_specific_jar" if="application.specific.jars.present">    
    <delete file="./${specificjar.name}"/>
     <copy file="${specificjar.dir}/${specificjar.name}" todir="." />
  </target>

  <target name="copy_binary" depends="copy_war_common,copy_ear_common,check_for_application_specific_jar,copy_application_specific_jar"/>
  
  <!-- ======================================================= -->
  <!-- Assemble WAR module.                                    -->
  <!-- ======================================================= -->
  
  <target name="check_warfile">
    <available file="${build.classesdir}/${war.pkg}/" type="dir" 
               property="warfiles.present"/>
    <available file="${src.docroot}" type="dir" 
               property="docroot.present"/>
    <available file="${src.conf}" type="dir" 
               property="src.conf.present"/>
  </target>

  <target name="copy_warfiles" if="warfiles.present">
    <copy todir="${assemble.war}/WEB-INF/classes/${war.pkg}">
      <fileset dir="${build.classesdir}/${war.pkg}/" includes="**/*.class"/>
    </copy>
  </target>

  <target name="copy_docroot" if="docroot.present">
    <copy todir="${assemble.war}">
      <fileset dir="${src.docroot}" excludes="cvs,annontation"/>
    </copy>
  </target>

  <target name="copy_properties_to_war" if="warfiles.present">
    <copy todir="${assemble.war}/WEB-INF/classes">
      <fileset dir="${src.conf}/" includes="**/*.properties"/>
    </copy>
  </target>
  
  <target name="copy_ejbjar_war" if="ejbjar.done">
    <copy file="${sample.name}${ejbjar-dir-suffix}/${assemble.ejbjar}/${ejbjar}" 
          tofile="${assemble.war}/WEB-INF/lib/${ejbjar}"/>
  </target>


  <target name="mkdir_war">
    <mkdir dir="${assemble.war}"/>
  </target>
  
  <target name="add_classes" if="warfiles.present">
    <jar destfile="${assemble.war}/${war}" update="true">
      <zipfileset dir="${build.classesdir}/${war.pkg}/" includes="**/*.class" 
                                       prefix="WEB-INF/classes/${war.pkg}"/>
    </jar>
  </target>
  
  <target name="add_properties" if="src.conf.present">    
    <jar destfile="${assemble.war}/${war}" update="true">
      <zipfileset dir="${src.conf}/" includes="**/*.properties"
                                     prefix="WEB-INF/classes/"/>
    </jar>
  </target>

  <target name="add_docroot" if="docroot.present">
    <jar destfile="${assemble.war}/${war}" update="true">
      <fileset dir="${src.docroot}" excludes="CVS,annotation"/>
    </jar>
  </target>

  <target name="add_ejbjar_war" if="ejbjar.done">
    <jar destfile="${assemble.war}/${war}" update="true">
      <zipfileset dir="../${sample.name}${ejbjar-dir-suffix}/${assemble.ejbjar}" includes="${ejbjar}" 
                                           prefix="WEB-INF/lib"/>
    </jar>
  </target>
  
  <target name="add_sharejar_war" if="sharejar.done">
    <jar destfile="${assemble.war}/${war}" update="true">
      <zipfileset dir="../${sample.name}${sharejar-dir-suffix}/${assemble.sharejar}" includes="${sharejar}" 
                                           prefix="WEB-INF/lib"/>
    </jar>
  </target>

  <target name="add_ejbjar_classes_to_webwar" if="add.ejbjarclasses.to.webwar">
    <jar destfile="${assemble.war}/${war}" update="true">
      <zipfileset dir="../${sample.name}${ejbjar-dir-suffix}/${assemble.ejbjar}" includes="**/*.class" 
                                            excludes="**/*Client.class" prefix="WEB-INF/classes/${jar.pkg}"/>
    </jar>
  </target> 
  
  <target name="create_war_common" depends="clean_war_common,mkdir_war,check_warfile,add_docroot,add_classes,add_properties,add_sharejar_war,add_ejbjar_war,add_ejbjar_classes_to_webwar">
    <property name="war.done" value="true"/>
  </target>

  <!-- ======================================================= -->
  <!-- Assemble EAR module.                                    -->
  <!-- ======================================================= -->
  
  <target name="mkdir_ear">
    <mkdir dir="${assemble.ear}/META-INF"/>
  </target>
 
  <target name="copy_ejbjar" if="ejbjar.done">
    <copy file="${assemble.ejbjar}/${ejbjar}" 
          tofile="${assemble.ear}/${ejbjar}"/>
  </target>

  <target name="copy_war" if="war.done">
    <copy file="${assemble.war}/${war}"    tofile="${assemble.ear}/${war}"/>
  </target>
  
  <target name="copy_clientjar" if="clientjar.done">
     <copy file="${assemble.clientjar}/${clientjar}" 
           tofile="${assemble.ear}/${clientjar}"/>
  </target>
  

  <target name="mkdir_ear_dir">
    <mkdir dir="${assemble.ear}"/>
  </target>

  <target name="add_ejbjar" if="ejbjar.done">
    <jar destfile="${assemble.ear}/${ear}" update="true">
      <fileset dir="${sample.name}${ejbjar-dir-suffix}/${assemble.ejbjar}" includes="${ejbjar}"/>
    </jar>
  </target>
  
  <target name="add_sharejar" if="sharejar.done">
    <jar destfile="${assemble.ear}/${ear}" update="true">
      <fileset dir="${sample.name}${sharejar-dir-suffix}/${assemble.sharejar}" includes="${sharejar}"/>
    </jar>
  </target>

  <target name="add_war" if="war.done">
    <jar destfile="${assemble.ear}/${ear}" update="true">
      <fileset dir="${sample.name}${webwar-dir-suffix}/${assemble.war}" includes="${war}"/>
    </jar>
  </target>

  <target name="add_clientjar" if="clientjar.done">
    <jar destfile="${assemble.ear}/${ear}" update="true">
      <fileset dir="${sample.name}${appclient-dir-suffix}/${assemble.clientjar}" includes="${clientjar}"/>
    </jar>
  </target>

  <target name="create_ear_common" depends="clean_ear_common,mkdir_ear_dir,add_sharejar,add_ejbjar,add_clientjar,add_war">
    <jar destfile="${assemble.ear}/${ear}" update="true">
      <metainf dir="${src.conf}" includes="${earDD}"/>
    </jar>
    <delete file="../${war}" />
    <delete file="../${ejbjar}" />
    <delete file="../${clientjar}" />    
  </target>
 
  
  <!-- ======================================================= -->
  <!-- Assemble SHARE JAR module.                                -->
  <!-- ======================================================= -->
  
  <target name="clean_sharejar_common">
    <delete dir="${assemble.sharejar}"/>    
  </target>
  
  <target name="create_sharejar_common" depends="clean_sharejar_common">
    <mkdir dir="${assemble.sharejar}"/>
    <jar destfile="${assemble.sharejar}/${sharejar}">
      <zipfileset dir="${build.classesdir}" includes="**/*.class"/>
    </jar>
    <property name="sharejar.done" value="true"/>
  </target>
  
  
  <!-- ======================================================= -->
  <!-- Assemble EJB JAR module.                                -->
  <!-- ======================================================= -->
  
  <target name="check_ejbjarfile">
    <available file="${build.classesdir}/${jar.pkg}/" type="dir" 
               property="ejbjarfiles.present"/>    
  </target>
        
  <target name="add_sharejar_to_ejb_jar" if="sharejar.done">
    <jar destfile="${assemble.ejbjar}/${ejbjar}" update="true">      
      <zipfileset dir="../${sample.name}${sharejar-dir-suffix}/${assemble.sharejar}" 
                  includes="${sharejar}"/>
    </jar>
  </target>
  
  <target name="add_shareclasses_to_ejb_jar" if="sharejar.done">
    <jar destfile="${assemble.ejbjar}/${ejbjar}" update="true">
      <zipfileset dir="../${sample.name}${sharejar-dir-suffix}/${build}/classes/" 
                  includes="**/*.class" 
                  excludes="**/servlet/"/>
    </jar>
  </target>
   
  <target name="add_wsdlfiles_to_ejb_jar" if="iswebserviceclient">
    <jar destfile="${assemble.ejbjar}/${ejbjar}" update="true">
      <zipfileset dir="../${sample.name}${ejbjar-dir-suffix}/${src.conf}" includes="${wsdlfile}" 
                                           prefix="META-INF/wsdl/"/>
      <zipfileset dir="../${sample.name}${ejbjar-dir-suffix}/${build}/shared" includes="mapping.xml" 
                                           prefix="shared/"/>
    </jar>
  </target>
  
  <target name="add_classes_to_ejb_jar">
    <jar destfile="${assemble.ejbjar}/${ejbjar}" update="true">
      <zipfileset dir="${build.classesdir}/" includes="**/*.class" 
                  excludes="**/servlet/, **/client/"/>
      <metainf dir="${jarDD.dir}" includes="${jarDD}"/>          
    </jar>
  </target>     
  
  <target name="mkdir_ejbjar_common">
    <mkdir dir="${assemble.ejbjar}"/>  
  </target>
  
  <target name="create_ejbjar_common" 
    depends="clean_ejbjar_common,mkdir_ejbjar_common,compile_common,add_classes_to_ejb_jar,add_shareclasses_to_ejb_jar,add_wsdlfiles_to_ejb_jar">   
    <property name="ejbjar.done" value="true"/>
  </target>
  
  <!-- ======================================================= -->
  <!-- Assemble EJB JAR module.        OLD WAY                 -->
  <!-- ======================================================= -->
  <target name="create_ejbjar_common_old" depends="clean_ejbjar_common">
    <mkdir dir="${assemble.ejbjar}"/>
    <jar destfile="${assemble.ejbjar}/${ejbjar}">
      <zipfileset dir="${build.classesdir}/${jar.pkg}/" includes="**/*.class" 
                  excludes="**/servlet/, **/client/" prefix="${jar.pkg}"/>
      <metainf dir="${jarDD.dir}" includes="${jarDD}"/>
    </jar>
    <!-- AEM NEEDED?copy file="${assemble.ejbjar}/${ejbjar}" tofile="../${ejbjar}"/>-->
    <property name="ejbjar.done" value="true"/>
  </target>
  
  
  
  <!-- ======================================================= -->
  <!-- Assemble CLIENT JAR module.        OLD WAY              -->
  <!-- ======================================================= -->
  
  <target name="clientjar_common" depends="clean_clientjar_common">
    <mkdir dir="${assemble.clientjar}"/>
    <jar destfile="${assemble.clientjar}/${clientjar}" manifest="${clientDD.dir}/MANIFEST.MF">
      <zipfileset dir="${build.classesdir}/${app.pkg}/" 
                  includes="**/*Client.class" excludes="**/servlet/"
                  prefix="${app.pkg}"/>
      <metainf dir="${clientDD.dir}" includes="${clientDD}"/>
    </jar>
    <property name="clientjar.done" value="true"/>
  </target>

 <target name="core_clientjar_common">  
     <ant antfile="build.xml" inheritAll="true" dir="${sample.name}${appclient-dir-suffix}" target="core"/>
     <property name="clientjar.done" value="true"/>   
  </target>  
  
  
  <!-- ======================================================= -->
  <!-- Assemble APPCLIENT JAR module.                          -->
  <!-- ======================================================= -->
  
  <target name="add_sharejar_to_appclient_jar" if="sharejar.done">
    <jar destfile="${assemble.clientjar}/${clientjar}" update="true">
      <zipfileset dir="../${sample.name}${sharejar-dir-suffix}/${assemble.sharejar}" 
                  includes="${sharejar}"/>
    </jar>
  </target>
  
  <target name="add_shareclasses_to_appclient_jar" if="sharejar.done">
    <jar destfile="${assemble.clientjar}/${clientjar}" update="true">
      <zipfileset dir="../${sample.name}${sharejar-dir-suffix}/${build}/classes/" 
                  includes="**/*.class" 
                  excludes="**/servlet/"/>
    </jar>
  </target>
   
  <target name="add_wsdlfiles_to_appclient_jar" if="iswebserviceclient">
    <jar destfile="${assemble.clientjar}/${clientjar}" update="true">
      <zipfileset dir="../${sample.name}${webwar-dir-suffix}/${src.conf}" includes="${wsdlfile}" 
                                           prefix="META-INF/wsdl/"/>
      <zipfileset dir="../${sample.name}${webwar-dir-suffix}/${build}/shared" includes="mapping.xml" 
                                           prefix="shared/"/>
    </jar>
  </target>
  
  <target name="add_classes_to_appclient_jar">
    <jar destfile="${assemble.clientjar}/${clientjar}" update="true">
      <zipfileset dir="${build.classesdir}/" includes="**/*.class" 
                  excludes="**/servlet/"/>
      <metainf dir="${clientDD.dir}" includes="${clientDD}"/>
      <manifest>
         <attribute name="Main-Class" value="${appclient-Main-Class}" />
       </manifest>     
    </jar>
  </target>
  
  <target name="clean_appclientjar_common">
    <delete dir="${assemble.clientjar}"/>    
  </target>
  
  <target name="mkdir_appclientjar_common">
    <mkdir dir="${assemble.clientjar}"/>  
  </target>
  
  <target name="add_ejbjar_classes_to_clientjar" if="add.ejbjarclasses.to.clientjar">  
    <jar destfile="${assemble.clientjar}/${clientjar}" update="true">    
          <zipfileset dir="../${sample.name}${ejbjar-dir-suffix}/${build.classesdir}/${jar.pkg}" includes="**/*.class"     
                                            excludes="**/servlet/" prefix="${jar.pkg}"/>
    </jar>    
  </target> 
  
  <target name="create_appclientjar_common" 
    depends="clean_appclientjar_common,mkdir_appclientjar_common,compile_common,add_classes_to_appclient_jar,add_shareclasses_to_appclient_jar,add_wsdlfiles_to_appclient_jar,add_ejbjar_classes_to_clientjar">   
    <property name="clientjar.done" value="true"/>
  </target>
  
  
  <!-- ======================================================= -->
  <!-- Assemble Simple JAR file.                               -->
  <!-- ======================================================= -->
  
  <target name="create_jar_common" depends="clean_jar_common">
    <mkdir dir="${assemble.jar}"/>
    <jar destfile="${assemble.jar}/${jar}">
      <zipfileset dir="${build.classesdir}/${app.pkg}/" includes="**/*.class"
                                                        prefix="${app.pkg}"/>
    </jar>
  </target>

       
  <!-- ======================================================= -->
  <!-- Deploy CLI support.                                    -->
  <!-- ======================================================= -->

    <!-- checkPlatform determines which OS is being utilized. -->
    <target name="checkPlatform" >
        <condition property ="isUnixPlatform">
           <os family="unix"/>
        </condition>
        <condition property ="isWindowsPlatform">
           <os family="windows"/>
        </condition>
    </target>
    
     <!--
         configUnix will be invoked when ant is being run on 
         unix/Linux.  It will configure the values for ${os}
         and ${dir.sep}
         
         Due to differences on how ant invokes external commands
         on windows, we need to execute asadmin and imqusermgr
         differently on each platform.
    -->
    <target name="configUnix" depends="checkPlatform" if="isUnixPlatform" >
           <echo message="on unix"/>
           <property name="dir.sep" value="/"/>
           <property name="os" value="unix"/>
           <property name="exec.asadmin" value="${com.sun.aas.installRoot}/bin/asadmin"/>
           <property name="exec.appclient" value="${com.sun.aas.installRoot}/bin/appclient"/>
           <property name="exec.verifier" value="${com.sun.aas.installRoot}/bin/verifier"/>
           <property name="exec.imqusermgr" value="${com.sun.aas.imqBinDir}/imqusermgr" />
    </target>    
            
    <!--
         configWindows will be invoked when ant is being run on 
         windows.  It will configure the values for ${os}
         and ${dir.sep}
         
         Due to differences on how ant invokes external commands
         on windows, we need to execute asadmin and imqusermgr
         differently on each platform.
    -->
    <target name="configWindows" depends="checkPlatform" if="isWindowsPlatform" >
           <echo message="on windows"/>
           <property name="dir.sep" value="\\"/>
           <property name="os" value="windows"/>
           <property name="exec.asadmin" value="${com.sun.aas.installRoot}/bin/asadmin.bat"/>
           <property name="exec.appclient" value="${com.sun.aas.installRoot}/bin/appclient.bat"/>
           <property name="exec.verifier" value="${com.sun.aas.installRoot}/bin/verifier.bat"/>
           <property name="exec.imqusermgr" value="${com.sun.aas.imqBinDir}/imqusermgr.exe" />
    </target>
     
    
  <target name="select_update_war_common" if="application.type.war">
    <condition property="update.file" value="${assemble.war}/${war}"> 
        <available file="${assemble.war}/${war}"/>   
    </condition>    
  </target> 

  <target name="select_update_ear_common" if="application.type.ear">
    <condition property="update.file" value="${assemble.ear}/${ear}"> 
        <available file="${assemble.ear}/${ear}"/>   
    </condition>    
  </target> 
  
  <target name="select_update_binary_common" depends="select_update_war_common,select_update_ear_common"/>
  
  <!-- ======================================================= -->
  <!-- Update target.                                          -->
  <!-- ======================================================= -->
  <target name="update_common" if="update.file" depends="setup_env">
    <echo message="Updating ${update.file}."/>
    <sun-appserv-update file="${update.file}"/>
  </target>
  
  <!-- ======================================================= -->
  <!-- Update target: dynamically updates and reloads app.     -->
  <!-- ======================================================= -->
  <!-- ============================================================================ -->
  <!-- Does destfile = ${build.dir}/hello.war exists                                -->
  <!-- If it does, we can go ahead and pass the control to the update_common target -->
  <!-- If it doesn't, then we flag a  message to the user                           -->
  <!-- saying that he needs to build the sample again using "asant core".           -->
  <!-- ============================================================================ -->
  <target name="update" depends="init_common,select_update_binary_common,update_common,echo_rebuild_sample_warning" />  
  
  <target name="echo_rebuild_sample_warning" unless="update.file" >
    <echo>
     ======================================================
     You need to build the sample using "asant core" 
     before invoking the "update" target.
     ======================================================
     </echo>    
  </target>
  
  <!-- ======================================================= -->
  <!-- Deploy CLI support.                                    -->
  <!-- ======================================================= -->
  <!-- Name of the asadmin commands -->  
  <property name="sjsas.domain.dir" value="${com.sun.aas.installRoot}/domains"/>
  <property name="sjsas.domain.name" value="${domain.name}"/>    
  <property name="sjsas.domain" value="${sjsas.domain.dir}/${sjsas.domain.name}"/>
    
  <target name="configPlatform"
       depends="checkPlatform, configUnix, configWindows"/>
  
  <target name="reconfig.restart" depends="init_common, setpassword, configPlatform">
    <antcall target="restart.server"/>
  </target>   
      
  <target name="restart.server" depends="init_common, setpassword, configPlatform">
     <antcall target="stop.appserver"/>   
     <antcall target="start.appserver"/>   
  </target>

  <target name="stop.appserver" depends="configPlatform, init_common, setpassword">
    <echo message="Stopping Appserver on ${admin.host}"/>
    <sun-appserv-admin explicitcommand="stop-domain ${domain.name}" />
    <echo message="Waiting for server to stop before restarting."/>
 </target>
  
  <target name="start.appserver" depends="configPlatform, init_common, setpassword">
    <echo message="Restarting appserver on ${admin.host}"/>
    <sun-appserv-admin explicitcommand="start-domain ${domain.name}" />
    <echo message="Appserver started."/>
  </target>
 
 
  <!-- ======================================================= -->
  <!-- Create the CMP tables if they will not be created by the -->
  <!-- appserver at deploy time.                               -->
  <!-- ======================================================= --> 
 
  <target name="common.configure.db" depends="setup_db">
    <echo message="Create the CMP tables if they will not be created by the appserver at deploy time."/>
        <sql driver="${db.driver}"
             url="${db.url}"
             userid="${db.user}"
             password="${db.pwd}"
             classpath="${db.classpath}"
             delimiter="${db.delimiter}"
             autocommit="true"
             onerror="continue" >
             <transaction src="${transaction.src}"/>             
        </sql>               
  </target>            
  
  <target name="common.unconfigure.db" depends="setup_db">
    <echo message="Delete the CMP tables at undeploy time."/>
      <sql driver="${db.driver}"
             url="${db.url}"
             userid="${db.user}"
             password="${db.pwd}"
             classpath="${db.classpath}"
             delimiter="${db.delimiter}"
             autocommit="true"
             onerror="continue" >
             <transaction src="${transaction.src}"/>             
        </sql>                   
  </target>  
  
   
  <!-- ======================================================= -->
  <!-- FileRealm key generaion targets.                        -->
  <!-- ======================================================= -->

  <target name="setuserpassword" depends="init_common, envpassword, readpassword">
    <echo message="AS_ADMIN_PASSWORD=${admin.password}${line.separator}" file="${admin.password.file}" />
    <echo message="AS_ADMIN_USERPASSWORD=${app.userpassword}" file="${admin.password.file}" append="true" />
  </target>
  
  <target name="keygen_create" depends="setup_env"  unless="file.user.exists.common${app.user}">
    <echo message="Generating key for user ${app.user} in server ${appserver.instance}"/>
    <antcall target="setuserpassword"/>
    <sun-appserv-admin 
      command="create-file-user --groups ${app.groups} ${app.user}"
      user="${admin.user}" 
      passwordfile="${admin.password.file}" 
      host="${admin.host}" 
      port="${admin.port}" 
      asinstalldir="${com.sun.aas.installRoot}" />
  </target>

  <target name="keygen_common" depends="setup_env, verify_file_user_exists_common">
   <antcall target="keygen_create"/>
  </target>

  <target name="keydel_common" depends="setup_env">
    <echo message="Deleting key for user ${app.user} in server ${appserver.instance}"/>
    <sun-appserv-admin 
      command="delete-file-user ${app.user}"
      user="${admin.user}" 
      passwordfile="${admin.password.file}" 
      host="${admin.host}" 
      port="${admin.port}" 
      asinstalldir="${com.sun.aas.installRoot}" />
  </target>
  
  
  
  <!-- ======================================================= -->
  <!-- Selecting the appropriate file for deployment/verify    -->
  <!-- ======================================================= -->  
   
  <target name="select_clientjar_common" depends="init_common">
    <condition property="deploy.file" value="${assemble.clientjar}/${clientjar}"> 
        <available file="${assemble.clientjar}/${clientjar}"/>   
    </condition>
    <property name="deploy.file" value="./${clientjar}"/>
    
    <condition property="verify.file" value="${assemble.clientjar}/${clientjar}"> 
        <available file="${assemble.clientjar}/${clientjar}"/>   
    </condition>
    <property name="verify.file" value="./${clientjar}"/>
  </target> 
  
  <target name="select_jar_common" depends="init_common">
    <condition property="deploy.file" value="${assemble.jar}/${clientjar}"> 
        <available file="${assemble.jar}/${ejbjar}"/>   
    </condition>
    <property name="deploy.file" value="./${ejbjar}"/>
    
    <condition property="verify.file" value="${assemble.ejbjar}/${ejbjar}"> 
        <available file="${assemble.ejbjar}/${ejbjar}"/>   
    </condition>
    <property name="verify.file" value="./${ejbjar}"/>
  </target> 
  
  <target name="select_war_common" if="application.type.war">
    <condition property="deploy.file" value="${assemble.war}/${war}"> 
        <available file="${assemble.war}/${war}"/>   
    </condition>
    <property name="deploy.file" value="./${war}"/>
    
    <condition property="verify.file" value="${assemble.war}/${war}"> 
        <available file="${assemble.war}/${war}"/>   
    </condition>
    <property name="verify.file" value="./${war}"/>
  </target> 

  <target name="select_ear_common" if="application.type.ear">
      <condition property="deploy.file" value="${assemble.ear}/${ear}"> 
        <available file="${assemble.ear}/${ear}"/>   
    </condition>
    <property name="deploy.file" value="./${ear}"/>
    
    <condition property="verify.file" value="${assemble.ear}/${ear}"> 
        <available file="${assemble.ear}/${ear}"/>   
    </condition>
    <property name="verify.file" value="./${ear}"/>
   </target> 
  
  <target name="select_binary_common" depends="select_war_common,select_ear_common"/>
  
  <!-- ======================================================= -->
  <!-- Install targets.                                        -->
  <!-- ======================================================= -->
  <target name="set_createTable_args_common" if="usingDerby">    
    <property name="createTablesArgs"  value="--dropandcreatetables=true"/>    
  </target>
  <target name="set_dropTable_args_common" if="usingDerby">
     <property name="deleteTablesArgs"  value="--droptables=true"/>  
  </target>
  
  <target name="deploy_common" depends="setup_env, setup_db, configPlatform">
    <echo message="Deploying ${deploy.file}."/>
    <exec executable="${exec.asadmin}" >
        <arg line=" deploy"/>
        <arg line=" --user ${admin.user}"/>
        <arg line=" --passwordfile '${admin.password.file}'"/>
        <arg line=" --host ${admin.host}"/>
        <arg line=" --port ${admin.port}"/>
        <arg line=" --virtualservers ${appserver.instance}"/>
        <arg line=" --force=true"/>
        <arg line=" --name ${binary.name}"/>
        <arg line=" --upload=true"/>
        <arg line=" --dbvendorname=${dbvendorname}"/>
        <arg line="${extraargs.1}"/>
        <arg line="${extraargs.2}"/>
        <arg line="${createTablesArgs}"/>
        <arg line="${deploy.file}"/>
     </exec>   
  </target>
  
  <target name="deploy_retrieve_common" depends="setup_env, configPlatform">
    <echo message="Deploying ${deploy.file} and retrieving client stubs."/>
    <exec executable="${exec.asadmin}" >
        <arg line=" deploy"/>
        <arg line=" --user ${admin.user}"/>
        <arg line=" --passwordfile '${admin.password.file}'"/>
        <arg line=" --host ${admin.host}"/>
        <arg line=" --port ${admin.port}"/>
        <arg line=" --virtualservers ${appserver.instance}"/>
        <arg line=" --force=true"/>
        <arg line=" --name ${binary.name}"/>
        <arg line=" --upload=true"/>
        <arg line=" --retrieve=./"/>
        <arg line=" --dbvendorname=${dbvendorname}"/>
        <arg line="${extraargs.1}"/>
        <arg line="${extraargs.2}"/>
        <arg line="${createTablesArgs}"/>
        <arg line="${deploy.file}"/> 
     </exec> 
  </target>  
  
  <target name="deploy_noop_common">
    <echo message="This sample does not contain any J2EE application modules to deploy."/>
  </target>
  
  
  <!-- ======================================================= -->
  <!-- Uninstall targets.                                      -->
  <!-- ======================================================= -->
  <target name="undeploy_common" depends="setup_env, configPlatform">
    <echo message="Undeploying ${binary.name}."/>
    <exec executable="${exec.asadmin}" >
        <arg line=" undeploy"/>
        <arg line=" --user ${admin.user}"/>
        <arg line=" --passwordfile '${admin.password.file}'"/>
        <arg line=" --host ${admin.host}"/>
        <arg line=" --port ${admin.port}"/>
        <arg line=" ${extraargs.1}"/>
        <arg line=" ${deleteTablesArgs}"/>
        <arg line=" ${binary.name}"/>
    </exec>
  </target>

  <target name="set_stubfile_name">
       <property name="stub.file" value="./${binary.name}Client.jar"/>
   </target>
   
  <target name="undeploy_clean_stubs_common" depends="set_stubfile_name,undeploy_common">
      <echo message="Removing application client stubs: ${stub.file}."/>
      <delete file="${stub.file}" />
  </target>
  
   <target name="undeploy_noop_common">
    <echo message="There is no J2EE component to undeploy for this sample. Please refer to the documentation for this sample."/>
  </target>
 
  
  <!-- ======================================================= -->
  <!-- Admin targets.                                      -->
  <!-- ======================================================= -->
  <target name="admin_command_common" depends="setup_env">
    <echo message="Doing admin task ${admin.command}"/>
    <sun-appserv-admin 
      command="${admin.command}"
      user="${admin.user}"             
      passwordfile="${admin.password.file}"
      host="${admin.host}" 
      port="${admin.port}" 
      asinstalldir="${com.sun.aas.installRoot}" />       
  </target>         
  
  <target name="echo_portability_EJB_common" if="echo.non.portable.EJB.verifier.usage">
    <echo message="NOTE: This module ${verify.file} demonstrates application server specific functionality and therefore the following test: " />
    <echo message="        tests.ejb.EjbArchiveClassesLoadable " />
    <echo message="does not pass the verifier." />
  </target>
  
  <target name="echo_portability_WEB_WarClassesLoadable_common" if="echo.non.portable.WEB.WarClassesLoadable.verifier.usage">
    <echo message="NOTE: This module ${verify.file} demonstrates application server specific functionality and therefore the following test: " />
    <echo message="        tests.web.WebArchiveClassesLoadable" />
    <echo message="does not pass the verifier." />
  </target>
  
  <target name="echo_portability_WEB_AllJSPsCompilable_common" if="echo.non.portable.WEB.AllJSPsCompilable.verifier.usage">
    <echo message="NOTE: This module ${verify.file} demonstrates application server specific functionality and therefore the following test: " />
    <echo message="        tests.web.AllJSPsMustBeCompilable" />
    <echo message="does not pass the verifier." />
  </target>
  
  <target name="echo_portability_WEB_ServletClass_common" if="echo.non.portable.WEB.ServletClass.verifier.usage">
    <echo message="NOTE: This module ${verify.file} demonstrates application server specific functionality and therefore the following test: " />
    <echo message="        tests.web.ServletClass" />
    <echo message="does not pass the verifier." />
  </target>    
  
  <target name="echo_portability_messges" depends="echo_portability_EJB_common,echo_portability_WEB_WarClassesLoadable_common,echo_portability_WEB_AllJSPsCompilable_common, echo_portability_WEB_ServletClass_common"/>
  
  <!-- ======================================================= -->
  <!-- Verify Targets.                                         -->
  <!-- ======================================================= -->
  <target name="verify_common" depends="init_common, setup_env, configPlatform,echo_portability_messges">
    <echo message="Verifying Process for ${verify.file}" />        
    <exec executable="${exec.verifier}" >
        <arg line="${verify.file}"/>
     </exec>  
  </target> 
    
  <target name="verify_noop_common">
    <echo message="This sample does not contain any J2EE application modules to verify."/>
  </target>
  
  <!-- ======================================================= --> 
  <!-- CleanUp Pointbase table Targets.                        --> 
  <!-- ======================================================= -->
  <target name="sql_common" depends="setup_db"> 
  <!-- don't use commander
	 <java classname="com.pointbase.tools.toolsCommander" classpath="${db.classpath}"> 
	   <arg line="${db.driver} ${db.url} ${db.file} ${db.user} ${db.pwd}" /> 
	 </java> -->                  
    <antcall target="common.configure.db">
      <param name="driver" value="${db.driver}" />
      <param name="url" value="${db.url}"/>
      <param name="userid" value="${db.user}"/>
      <param name="password" value="${db.pwd}"/>
      <param name="classpath" value="${db.classpath}"/>
      <!--<param name="delimiter"  value="${db.delimiter}"/>-->
      <!--<param name="autocommit"  value="true"/>-->
      <!--<param name="onerror"  value="continue"/>-->
      <param name="src"  value="${db.file}"/>
    </antcall>
  </target>
 
  
  <!-- ======================================================= -->
  <!--       Targets to deploy/undeploy resources.             -->
  <!-- ======================================================= -->
  <target name="create-jdbc-connection-pool_common" depends="setup_db" unless="create.jdbc.conpool.common">
        <exec executable="${exec.asadmin}" >
            <arg line=" create-jdbc-connection-pool"/>
            <arg line=" --user ${admin.user}"/>
            <arg line=" --passwordfile '${admin.password.file}'"/>
            <arg line=" --host ${admin.host}"/>
            <arg line=" --port ${admin.port}"/>
            <arg line=" --datasourceclassname ${ds.class}"/>
            <arg line=" --restype ${restype}"/>
            <arg line=" --steadypoolsize 16"/>
            <arg line=" --maxpoolsize 32"/>
            <arg line=" --property ${db.properties}"/>
            <arg line=" ${conpool.name}"/>
        </exec>
  </target>

  <target name="create-jdbc-resource_common" unless="create.jdbc.resource.common" depends="setup_env">
    <antcall target="admin_command_common">
      <param name="admin.command"
        value="create-jdbc-resource
         --connectionpoolid ${conpool.name} ${extraargs.1} ${jdbc.resource.name}"/>
    </antcall>
  </target>

  <target name="delete-jdbc-connection-pool_common">
    <antcall target="admin_command_common">
      <param name="admin.command"
        value="delete-jdbc-connection-pool --cascade=true ${conpool.name}" />
    </antcall>
  </target>

  <target name="delete-jdbc-resource_common" depends="setup_env">
    <antcall target="admin_command_common">
      <param name="admin.command"
        value="delete-jdbc-resource ${extraargs.1} ${jdbc.resource.name}" />
    </antcall>
  </target>

  <target name="deploy_jdbc_resource_common" depends="setup_env,verify_jdbc_connection_pool_common,verify_jdbc_resource_common">
    <antcall target="create-jdbc-connection-pool_common"/>
    <antcall target="create-jdbc-resource_common"/>
  </target>


  <target name="create-persistence-resource_common" unless="create.persistence.resource.common" depends="setup_env">
    <antcall target="admin_command_common">
      <param name="admin.command"
        value="create-persistence-resource ${extraargs.1} ${pm.resource.name}" />
    </antcall>
    <antcall target="admin_command_common">
      <param name="admin.command" value="set
        domain.resources.persistence-manager-factory-resource.${pm.resource.name}.factory-class=${pm.factory.class}"/>
    </antcall>
    <antcall target="admin_command_common">
      <param name="admin.command" value="set
        domain.resources.persistence-manager-factory-resource.${pm.resource.name}.jdbc-resource-jndi-name=${jdbc.resource.name}" />
    </antcall>
  </target>

  <target name="delete-persistence-resource_common" depends="setup_env">
    <antcall target="admin_command_common">
      <param name="admin.command"
        value="delete-persistence-resource ${extraargs.1} ${pm.resource.name}" />
    </antcall>
  </target>

   <target name="create-imq-user_common" depends="setup_env" unless="imq.user.exists.common${imq.userName}">
    <exec executable="${exec.imqusermgr}" >
      <env key="IMQ_JAVAHOME" value="${com.sun.aas.javaRoot}"/>
      <arg line=" add"/>
      <arg line=" -u ${imq.userName} "/>
      <arg line=" -p ${imq.userPassword} "/>
      <arg line=" -g ${imq.userGroup} "/>
      <arg line=" -varhome ${com.sun.aas.imqHome} "/>
      <arg line=" -f "/>
      <arg line=" -i ${jmsServer} "/>
    </exec>
  </target>
     
  <target name="create-jms-connection_common" unless="jms.connection.exists.common" depends="setup_env">
    <antcall target="admin_command_common">
      <param name="admin.command"
        value="create-jms-resource --restype ${queue.factory.type} ${queue.factory.jndi.name}" />
    </antcall>
  </target> 
                                                                                                                                                             
  <target name="delete-jms-connection_common">
    <antcall target="admin_command_common">
      <param name="admin.command" value="delete-jms-resource ${queue.factory.jndi.name} " />
    </antcall>
  </target>
                                                                                                                                                             
  <target name="create-jms-queue_common" unless="jms.queue.exists.common" depends="setup_env">
    <antcall target="admin_command_common">
      <param name="admin.command"
        value="create-jms-resource
          --restype ${queue.type}
          --property ${queue.property.name}=${queue.property.value}
          ${queue.jndi.name}" />
    </antcall>
  </target>
                                                                                                                                                             
  <target name="delete-jms-queue_common">
    <antcall target="admin_command_common">
      <param name="admin.command" value="delete-jms-resource ${queue.jndi.name} " />
    </antcall>
  </target>
                                                                                                                                                             
  <target name= "deploy-jms-resource_common" depends = "verify_jms_connection_exists_common, verify_jms_queue_exists_common" >
    <antcall target="create-jms-connection_common"/>
    <antcall target="create-jms-queue_common"/>
  </target>
                                                                                                                                                             
  <target name= "undeploy-jms-resource_common">
    <antcall target="delete-jms-connection_common"/>
    <antcall target="delete-jms-queue_common"/>
  </target>

  <target name="create-javamail-resource_common" unless="create.javamail.resource.common" depends="setup_env">
    <antcall target="admin_command_common">
      <param name="admin.command" value="create-javamail-resource ${javamail.resource.properties} ${javamail.resource.name}"/>
    </antcall>
  </target>
 
  <target name="delete-javamail-resource_common" depends="setup_env">
    <antcall target="admin_command_common">
      <param name="admin.command" value="delete-javamail-resource ${javamail.resource.name}"/>
    </antcall>
  </target>



  <!-- ========================================================== -->
  <!-- Check duplicate targets for deploy/undeploy resources      -->
  <!-- ========================================================== -->
  
  <target name="verify_jdbc_resource_common" depends="setup_env,init_common,configPlatform">
    <exec executable="${exec.asadmin}" outputproperty="list.resource">
            <arg line=" list-jdbc-resources"/>
            <arg line=" --user ${admin.user}"/>
            <arg line=" --passwordfile '${admin.password.file}'"/>
            <arg line=" --host ${admin.host}"/>
            <arg line=" --port ${admin.port}"/>
            <arg line=" ${cluster.name}"/>
    </exec>

    <condition property="create.jdbc.resource.common" value="true">
      <contains string="${list.resource}" substring="${jdbc.resource.name}" casesensitive="false"/>
    </condition>
    <antcall target="message_warning_jdbc_resource_exists"/>
  </target>
              
  <target name="verify_custom_resource_common" depends="setup_env,init_common,configPlatform">
    <exec executable="${exec.asadmin}" outputproperty="list.custom.resource">
            <arg line=" list-custom-resources"/>
            <arg line=" --user ${admin.user}"/>
            <arg line=" --passwordfile '${admin.password.file}'"/>
            <arg line=" --host ${admin.host}"/>
            <arg line=" --port ${admin.port}"/>
    </exec>

    <condition property="create.custom.resource.common" value="true">
      <contains string="${list.custom.resource}" substring="${bean.jndiname}" casesensitive="false"/>
    </condition>
    <antcall target="message_warning_custom_resource_exists"/>
  </target>
  
                                                                             
  <target name="verify_jdbc_connection_pool_common" depends="setup_env,configPlatform">
    <exec executable="${exec.asadmin}" outputproperty="list.pool">
            <arg line=" list-jdbc-connection-pools"/>
            <arg line=" --user ${admin.user}"/>
            <arg line=" --passwordfile '${admin.password.file}'"/>
            <arg line=" --host ${admin.host}"/>
            <arg line=" --port ${admin.port}"/>
    </exec>
                                                                                          
    <condition property="create.jdbc.conpool.common" value="true">
      <contains string="${list.pool}" substring="${conpool.name}" casesensitive="false"/>
    </condition>
    <antcall target="message_warning_jdbc_conpool_exists"/>
  </target>

  <target name="verify_persistence_resource_common" depends="setup_env,configPlatform">
    <exec executable="${exec.asadmin}" outputproperty="list.persistence">
            <arg line=" list-persistence-resources"/>
            <arg line=" --user ${admin.user}"/>
            <arg line=" --passwordfile '${admin.password.file}'"/>
            <arg line=" --host ${admin.host}"/>
            <arg line=" --port ${admin.port}"/>
            <arg line=" ${cluster.name}"/>
    </exec>
                                                                                          
    <condition property="create.persistence.resource.common" value="true">
      <contains string="${list.persistence}" substring="${pm.resource.name}" casesensitive="false"/>
    </condition>
    <antcall target="message_warning_persistence_resource_exists"/>
  </target>

  <target name="verify_javamail_resource_common" depends="setup_env,configPlatform">
    <exec executable="${exec.asadmin}" outputproperty="list.javamail">
            <arg line=" list-javamail-resources"/>
            <arg line=" --user ${admin.user}"/>
            <arg line=" --passwordfile '${admin.password.file}'"/>
            <arg line=" --host ${admin.host}"/>
            <arg line=" --port ${admin.port}"/>
    </exec>
    <condition property="create.javamail.resource.common" value="true">
      <contains string="${list.javamail}" substring="${javamail.resource.name}" casesensitive="false"/>
    </condition>
    <antcall target="message_warning_javamail_resource_exists"/>
  </target>

  <target name="verify_file_user_exists_common" depends="setup_env,configPlatform">
    <exec executable="${exec.asadmin}" outputproperty="list.users" failonerror="true">
            <arg line=" list-file-users"/>
            <arg line=" --user ${admin.user}"/>
            <arg line=" --passwordfile '${admin.password.file}'"/>
            <arg line=" --host ${admin.host}"/>
            <arg line=" --port ${admin.port}"/>
    </exec>
    <condition property="file.user.exists.common${app.user}" value="true">
      <contains string="${list.users}" substring="${app.user}" casesensitive="false"/>
    </condition>
    <antcall target="message_warning_file_user_exists"/>
  </target>
  
  <target name="verify_imq_user_exists_common" depends="setup_env,configPlatform">
    <exec executable="${exec.imqusermgr}" outputproperty="list.imq.users" failonerror="true">
            <env key="IMQ_JAVAHOME" value="${com.sun.aas.javaRoot}"/>
            <arg line=" -varhome ${com.sun.aas.imqHome} "/>          
            <arg line=" list"/>  
            <arg line=" -i ${jmsServer} "/>
    </exec>    
    <condition property="imq.user.exists.common${imq.userName}" value="true">
      <contains string="${list.imq.users}" substring="${imq.userName}" casesensitive="false"/>
    </condition>
    <antcall target="message_warning_imq_user_exists"/>
  </target>
  
  <target name="verify_jms_connection_exists_common" depends="setup_env,configPlatform">
    <exec executable="${exec.asadmin}" outputproperty="list.jms.resources" failonerror="true">
            <arg line=" list-jms-resources"/>
            <arg line=" --user ${admin.user}"/>
            <arg line=" --passwordfile '${admin.password.file}'"/>
            <arg line=" --host ${admin.host}"/>
            <arg line=" --port ${admin.port}"/>
    </exec>
    <condition property="jms.connection.exists.common" value="true">
      <contains string="${list.jms.resources}" substring="${queue.factory.jndi.name}" casesensitive="false"/>
    </condition>
    <antcall target="message_warning_jms_connection_exists"/>
  </target>
  
  <target name="verify_jms_queue_exists_common" depends="setup_env,configPlatform">
    <exec executable="${exec.asadmin}" outputproperty="list.jms.resources" failonerror="true">
            <arg line=" list-jms-resources"/>
            <arg line=" --user ${admin.user}"/>
            <arg line=" --passwordfile '${admin.password.file}'"/>
            <arg line=" --host ${admin.host}"/>
            <arg line=" --port ${admin.port}"/>
    </exec>
    <condition property="jms.queue.exists.common" value="true">
      <contains string="${list.jms.resources}" substring="${queue.jndi.name}" casesensitive="false"/>
    </condition>
    <antcall target="message_warning_jms_queue_exists"/>
  </target>
    
  
  <!-- ================================================= -->
  <!--                Warning messages                   -->
  <!-- ================================================= -->

  <target name="message_warning_jdbc_conpool_exists" if="create.jdbc.conpool.common">
    <echo>
===================================================================
JDBC Connection Pool: ${conpool.name} already exists on the server. 
The existing ${conpool.name} JDBC connection pool will be used.
===================================================================
    </echo>
  </target>

  <target name="message_warning_jdbc_resource_exists" if="create.jdbc.resource.common">
    <echo>
==================================================================
JDBC Resource: ${jdbc.resource.name} already exists on the server. 
The existing ${jdbc.resource.name} JDBC resource will be used.
 =================================================================
    </echo>
  </target>

  <target name="message_warning_custom_resource_exists" if="create.custom.resource.common">
    <echo>
==================================================================
Custom Resource: ${bean.jndiname} already exists on the server. 
The existing ${bean.jndiname} custom resource will be used.
 =================================================================
    </echo>
  </target>
  
  <target name="message_warning_persistence_resource_exists" if="create.persistence.resource.common">
    <echo>
======================================================================
Persistent Resource: ${pm.resource.name} already exists on the server. 
The existing ${pm.resource.name} persistent resource will be used.
======================================================================
    </echo>
  </target>

<target name="message_warning_javamail_resource_exists" if="create.javamail.resource.common">
    <echo>
=========================================================================
Javamail resource: ${javamail.resource.name} already exists on the server.
The existing ${javamail.resource.name} javamail resource will be used. 
=========================================================================
    </echo>
  </target>


<target name="message_warning_file_user_exists" if="file.user.exists.common${app.user}">
    <echo>
=========================================================================
File user: ${app.user} already exists on the server.
The existing ${app.user} file user will be used.
=========================================================================
    </echo>
  </target>
  
  <target name="message_warning_imq_user_exists" if="imq.user.exists.common${imq.userName}">
    <echo>
=========================================================================
IMQ user: ${imq.userName} already exists on the server.
The existing ${imq.userName} IMQ user will be used.
=========================================================================
    </echo>
  </target>

<target name="message_warning_jms_connection_exists" if="jms.connection.exists.common">
    <echo>
==================================================================
JMS Connection: ${queue.factory.jndi.name} already exists on the server. 
The existing ${queue.factory.jndi.name} JMS connection will be used.
 =================================================================
    </echo>
  </target>

  <target name="message_warning_jms_queue_exists" if="jms.queue.exists.common">
    <echo>
==================================================================
JMS Queue: ${queue.jndi.name} already exists on the server. 
The existing ${queue.jndi.name} JMS queue will be used.
 =================================================================
    </echo>
  </target>  
  
