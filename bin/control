#!/bin/bash -e

source $OPENSHIFT_CARTRIDGE_SDK_BASH

source $OPENSHIFT_GLASSFISH_DIR/bin/util

GLASSFISH_BIN_DIR=${OPENSHIFT_GLASSFISH_DIR}/bin
GLASSFISH_PID_FILE=${OPENSHIFT_HOMEDIR}/app-root/runtime/glassfish.pid

GLASSFISH_DOCROOT_DIR=${OPENSHIFT_GLASSFISH_DIR}/versions/2.1/domains/domain1/docroot
GLASSFISH_AUTODEPLOY_DIR=${OPENSHIFT_GLASSFISH_DIR}/versions/2.1/domains/domain1/autodeploy

cartridge_type="glassfish"

DIRNAME=`dirname "$0"`



# Check if the server http port is up
function ishttpup() {
    let count=0
    while [ ${count} -lt 64 ]
    do
        if /usr/sbin/lsof -P -n -i "@${OPENSHIFT_GLASSFISH_IP}:${OPENSHIFT_GLASSFISH_PORT}" | grep "(LISTEN)" > /dev/null; then
            echo "Found ${OPENSHIFT_GLASSFISH_IP}:${OPENSHIFT_GLASSFISH_PORT} listening port"
            return 0
        fi
        let count=${count}+1

        sleep 2
    done

    return 1
}

# Check if the process is running
function isrunning() {

    # Check for running app
    if [ -f "$GLASSFISH_PID_FILE" ]; then
      jbpid=$(cat $GLASSFISH_PID_FILE);
      if /bin/ps --pid $jbpid 1>&2 >/dev/null;
      then
        return 0
      fi
    fi

    return 1
}


function start {
	echo "Starting $cartridge_type cart"

  # Check for running app
  if isrunning; then
      echo "Application is already running"
  else    
    ${GLASSFISH_BIN_DIR}/standalone.sh start > ${OPENSHIFT_TMP_DIR}/${cartridge_type}.log 2>&1 &
    RETVAL=$?
    if [ $RETVAL -eq 0 ]; then

      if ! ishttpup; then
	        echo "Timed out waiting for http listening port"
	        exit 1
	    fi

	    PID=`ps U ${OPENSHIFT_GEAR_UUID} | grep [d]omain1 | awk '{ print $1}'`
	    echo $PID > $GLASSFISH_PID_FILE
    fi
  fi

}

function stop {

  echo "Stopping $cartridge_type cart"

  if isrunning; then
    if [ -f "$GLASSFISH_PID_FILE" ]; then
      pid=$(cat $GLASSFISH_PID_FILE);
      echo "Stopping glassfish:$pid ..." 1>&2
      ${GLASSFISH_BIN_DIR}/standalone.sh stop > ${OPENSHIFT_TMP_DIR}/${cartridge_type}.log 2>&1 &
    else
      echo "Failed to locate GLASSFISH PID File" 1>&2
    fi
  fi

}

function restart {
  stop
  start
}

function status() {
   if isrunning
   then
      client_result "Application is running"
   else
      client_result "Application is either stopped or inaccessible"
   fi
}

function deploy() {
  echo "Deploying Glassfish"


  build_domain

  if [ "$(ls ${OPENSHIFT_REPO_DIR}/docroot)" ]; then
    rsync -r --delete --exclude ".*" ${OPENSHIFT_REPO_DIR}/docroot/ $GLASSFISH_DOCROOT_DIR
  else
    rm -rf ${GLASSFISH_DOCROOT_DIR}/*
  fi

  if [ "$(ls ${OPENSHIFT_REPO_DIR}/autodeploy)" ]; then
    rm -rf $GLASSFISH_AUTODEPLOY_DIR/.autodeploystatus/*
    rsync -r --delete --exclude ".*" ${OPENSHIFT_REPO_DIR}/autodeploy/ $GLASSFISH_AUTODEPLOY_DIR
  else
    rm -rf ${GLASSFISH_AUTODEPLOY_DIR}/*
  fi
}

function build_domain() {

source $OPENSHIFT_GLASSFISH_DIR/bin/standalone.conf

RUN_CONF="$DIRNAME/standalone.conf"

  if [ -r "$RUN_CONF" ]; then
      . "$RUN_CONF"
  fi
}


function not_implemented {
  echo "$CALL: not implemented"
}

case "$1" in
  start)         start ;;
  stop)          stop ;;
  restart)       restart ;;
  status)        status ;;
  reload)        not_implemented ;;
  tidy)          not_implemented ;;
  pre-build)     not_implemented ;;
  build)         not_implemented ;;
  deploy)        deploy ;;
  post-deploy)   not_implemented ;;
  pre-snapshot)  not_implemented ;;
  post-snapshot) not_implemented ;;
  pre-restore)   not_implemented ;;
  post-restore)  not_implemented ;;
  pre-receive)   not_implemented ;;
  *)           exit 0
esac

exit 0